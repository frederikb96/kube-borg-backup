# Example configuration for kube-borg-backup
# This shows a complete working example with PostgreSQL database backups

## =============================================================================
## Borg Repository Definitions
## =============================================================================
borgRepos:
  - name: borgbase-main
    repo: "ssh://user@server.borgbase.com/./repo"
    passphrase: "your-secure-borg-passphrase-here"
    privateKey: |
      -----BEGIN OPENSSH PRIVATE KEY-----
      your-ssh-private-key-here
      -----END OPENSSH PRIVATE KEY-----

## =============================================================================
## Applications
## =============================================================================
apps:
  - name: test
    namespace: default
    createNamespace: false

    # Snapshot configuration
    snapshot:
      pvcs:
        # PostgreSQL database with consistency hooks
        - name: postgres-data
          snapshotClass: longhorn
          hooks:
            pre:
              - pod: postgres-0
                container: postgres
                command:
                  - /bin/sh
                  - -c
                  - |
                    psql -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT pg_backup_start('snapshot-test', true);"
            post:
              - pod: postgres-0
                container: postgres
                command:
                  - /bin/sh
                  - -c
                  - |
                    psql -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT pg_backup_stop(true);" || echo "No backup in progress"

    # BorgBackup configuration
    borgbackup:
      borgRepo: borgbase-main
      cache:
        create: true
        pvcName: test-borg-cache
        storageClassName: local-path
        size: 2Gi
        cacheTheCache: false  # Copy cache to ephemeral local storage for faster access
        accessModes:
          - ReadWriteOncePod
      pvcs:
        # Archive will be named "test-postgres-data-TIMESTAMP"
        - name: postgres-data
          pvc: postgres-data
          class: longhorn-normal
          timeout: 3600
          cloneBindTimeout: 300

    # Restore hooks
    restore:
      preHooks:
        # Optional: Suspend Flux GitOps during restore
        - type: shell
          command: ["flux", "suspend", "kustomization", "flux-system", "--namespace", "flux-system"]
        # Scale down application (prevent writes during restore)
        - type: scale
          deployment: postgrest
          replicas: 0
        # Scale down database
        - type: scale
          statefulset: postgres
          replicas: 0
        # Wait for graceful shutdown
        - type: shell
          command: ["sleep", "10"]
      postHooks:
        # Scale database back up
        - type: scale
          statefulset: postgres
          replicas: 1
        # Scale application back up
        - type: scale
          deployment: postgrest
          replicas: 1
        # Optional: Resume Flux GitOps
        - type: shell
          command: ["flux", "resume", "kustomization", "flux-system", "--namespace", "flux-system"]
