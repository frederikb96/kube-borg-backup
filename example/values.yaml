## Example configuration for Immich backup with PostgreSQL database consistency
##
## This demonstrates a real-world production setup with:
## - PostgreSQL pg_backup_start/stop hooks for database consistency
## - Multiple PVCs (database, backend uploads, model cache)
## - Tiered retention policy for snapshots and borg archives
## - BorgBackup configuration for offsite backup to BorgBase
## - Proper timeouts for large datasets
##

## Namespace configuration
namespace:
  create: false
  name: immich

## ServiceAccount for RBAC permissions
serviceAccount:
  name: immich-backup

## =============================================================================
## Snapshot Configuration
## =============================================================================
snapshot:
  image:
    repository: ghcr.io/frederikb96/kube-borg-backup-controller
    tag: latest
    pullPolicy: IfNotPresent

  cron:
    # Run every hour for frequent snapshots
    schedule: "0 * * * *"
    startingDeadlineSeconds: 60
    successfulJobsHistoryLimit: 1
    failedJobsHistoryLimit: 1

  # CronJob timeout - should account for pre-hooks + snapshots + post-hooks
  timeout: 600  # 10 minutes

  # Tiered retention: Keep hourly, daily, weekly, monthly snapshots
  retention:
    hourly: 24    # Last 24 hours
    daily: 7      # Last 7 days
    weekly: 4     # Last 4 weeks
    monthly: 3    # Last 3 months

  # PVCs to snapshot
  pvcs:
    # PostgreSQL database with consistency hooks
    # IMPORTANT: Hooks ensure database is in consistent state for backup
    - name: immich-db-pvc
      snapshotClass: longhorn
      hooks:
        pre:
          # Put PostgreSQL into backup mode before snapshot
          # Handles both PG <15 (pg_start_backup) and PG >=15 (pg_backup_start)
          - pod: immich-postgres-0
            container: postgres
            command:
              - /bin/bash
              - -c
              - |
                VERSION_NUM=$(psql -U "$DB_USERNAME" -tAc "SHOW server_version_num;")
                if [ "$VERSION_NUM" -ge 150000 ]; then
                  psql -U "$DB_USERNAME" -c "SELECT pg_backup_start(label => 'immich_snap', fast => true);"
                else
                  psql -U "$DB_USERNAME" -c "SELECT pg_start_backup('immich_snap', true);"
                fi
        post:
          # Exit backup mode after snapshot
          # ALWAYS runs, even if snapshot fails (SIGTERM handler ensures this)
          - pod: immich-postgres-0
            container: postgres
            command:
              - /bin/bash
              - -c
              - |
                VERSION_NUM=$(psql -U "$DB_USERNAME" -tAc "SHOW server_version_num;")
                if [ "$VERSION_NUM" -ge 150000 ]; then
                  psql -U "$DB_USERNAME" -c "SELECT pg_backup_stop(wait_for_archive => true);" || echo "No backup in progress"
                else
                  psql -U "$DB_USERNAME" -c "SELECT pg_stop_backup(true);" || echo "No backup in progress"
                fi

    # Backend upload data (no hooks needed for file-based storage)
    - name: immich-backend-pvc
      snapshotClass: zfs-generic-smb-csi

    # Model cache (ML models for face recognition, etc.)
    - name: immich-model-cache-pvc
      snapshotClass: longhorn

## =============================================================================
## BorgBackup Configuration
## =============================================================================
borgbackup:
  image:
    repository: ghcr.io/frederikb96/kube-borg-backup-controller
    tag: latest
    pullPolicy: IfNotPresent

  cron:
    # Run every 6 hours at :30 (offset from snapshots)
    schedule: "30 */6 * * *"
    startingDeadlineSeconds: 300
    successfulJobsHistoryLimit: 1
    failedJobsHistoryLimit: 1

  # CronJob timeout - sum of all backup timeouts + overhead
  # 3 backups Ã— ~2h each + 30min overhead = 6.5h
  timeout: 23400  # 6.5 hours

  # Borg pod configuration (spawned by controller for each backup)
  pod:
    image:
      repository: ghcr.io/frederikb96/kube-borg-backup-essentials
      tag: latest
      pullPolicy: IfNotPresent
    # Privileged mode enabled by default (works with any PVC ownership)
    # privileged: false  # Uncomment to disable if cluster security requires
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"

  # Borg retention policy (applied during borg prune)
  retention:
    hourly: 24
    daily: 7
    weekly: 4
    monthly: 3
    yearly: 1

  # Borg cache for improved performance
  cache:
    create: true
    pvcName: immich-borg-cache
    storageClassName: openebs-hostpath
    size: 5Gi

  # Borg repository credentials
  borgRepo: "ssh://user@user.repo.borgbase.com/./repo"
  borgPassphrase: "your-secure-borg-passphrase-here"

  # SSH private key for repository access
  sshPrivateKey: |
    -----BEGIN OPENSSH PRIVATE KEY-----
    YOUR_SSH_PRIVATE_KEY_HERE
    Replace this with your actual BorgBase SSH private key
    Generate with: ssh-keygen -t ed25519 -C "immich-backup"
    Add public key to BorgBase repository settings
    -----END OPENSSH PRIVATE KEY-----

  # PVCs to backup (must match snapshot PVCs above)
  backups:
    # Database backup - largest dataset, longest timeout
    - name: immich-db
      pvc: immich-db-pvc
      # Use storage class with "Delete" reclaim policy for ephemeral clones
      class: longhorn
      # Timeout for large database (includes borg create + prune)
      timeout: 7200  # 2 hours
      # Wait up to 5min for clone PVC to provision from snapshot
      cloneBindTimeout: 300

    # Backend uploads - potentially very large (photos/videos)
    - name: immich-backend
      pvc: immich-backend-pvc
      class: zfs-generic-smb-csi
      # Longer timeout for large media library
      timeout: 10800  # 3 hours
      cloneBindTimeout: 300

    # Model cache - smaller, faster
    - name: immich-model-cache
      pvc: immich-model-cache-pvc
      class: longhorn
      # Shorter timeout for small cache
      timeout: 1800  # 30 minutes
      cloneBindTimeout: 180
