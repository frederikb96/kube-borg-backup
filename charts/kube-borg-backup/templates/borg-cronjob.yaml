{{- range .Values.apps }}
{{- $_ := include "kube-borg-backup.validateAppName" .name -}}
{{- $borgConfig := fromJson (include "kube-borg-backup.mergeBorgConfig" (dict "root" $ "app" .)) -}}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "kube-borg-backup.appResourceName" (dict "root" $ "appName" .name "resource" "borgbackup") }}
  namespace: {{ .namespace }}
  labels:
    {{- include "kube-borg-backup.labels" $ | nindent 4 }}
    app.kubernetes.io/component: {{ .name }}
spec:
  schedule: {{ $borgConfig.cron.schedule | quote }}
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: {{ $borgConfig.cron.startingDeadlineSeconds }}
  successfulJobsHistoryLimit: {{ $borgConfig.cron.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ $borgConfig.cron.failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      activeDeadlineSeconds: {{ $borgConfig.timeout }}
      backoffLimit: 0
      template:
        spec:
          serviceAccountName: {{ include "kube-borg-backup.serviceAccountName" $ }}
          restartPolicy: Never
          containers:
            - name: borgbackup
              image: "{{ $borgConfig.image.repository }}:{{ $borgConfig.image.tag }}"
              imagePullPolicy: {{ $borgConfig.image.pullPolicy }}
              command: ["python", "-m", "kube_snapshot_borgbackup.main"]
              volumeMounts:
                - name: config
                  mountPath: /config
                  readOnly: true
          volumes:
            - name: config
              secret:
                secretName: {{ include "kube-borg-backup.appResourceName" (dict "root" $ "appName" .name "resource" "borg-config") }}
{{- end }}
