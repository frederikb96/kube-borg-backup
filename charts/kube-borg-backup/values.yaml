## Namespace configuration
namespace:
  # Create namespace if it doesn't exist
  create: false
  # Namespace name where resources will be deployed
  name: default

## ServiceAccount for RBAC permissions
serviceAccount:
  # Name of the ServiceAccount
  # Needs permissions: volumesnapshots (create/list/delete), pvcs (create/list/delete), pods/exec (create)
  name: kube-borg-backup

## =============================================================================
## Snapshot Configuration
## =============================================================================
## Creates VolumeSnapshots for PVCs with tiered retention policy.
## Supports pre/post hooks for database consistency (e.g., pg_backup_start/stop).
##
## IMPORTANT NOTES:
## - Pre-hooks run SEQUENTIALLY before snapshots. If ANY fails, process aborts.
## - Snapshots are created IN PARALLEL for speed.
## - Post-hooks run SEQUENTIALLY after snapshots. They ALWAYS run, even on failure.
## - Post-hooks also run on pod termination (SIGTERM) for safety.
##
snapshot:
  # Container image configuration
  image:
    repository: ghcr.io/frederikb96/kube-borg-backup-controller
    tag: latest
    pullPolicy: IfNotPresent

  # CronJob schedule configuration
  cron:
    # When to run snapshots (cron format)
    # Example: "0 */4 * * *" = Every 4 hours
    schedule: "0 */4 * * *"
    # Max seconds to wait before giving up on starting a job
    startingDeadlineSeconds: 60
    # Number of successful jobs to keep
    successfulJobsHistoryLimit: 1
    # Number of failed jobs to keep
    failedJobsHistoryLimit: 1

  # CronJob timeout (activeDeadlineSeconds)
  # Maximum time in seconds for the snapshot controller to complete all snapshots
  # The controller creates snapshots in parallel, so this should account for:
  # - Pre-hook execution time (sequential, fail-fast)
  # - Snapshot creation time (parallel)
  # - Post-hook execution time (sequential, always run)
  # Example: 600 = 10 min
  timeout: 600

  # Snapshot retention policy (tiered retention)
  # Keeps 1 snapshot per time bucket (hourly/daily/weekly/monthly)
  retention:
    # Keep 1 snapshot per hour for last N hours
    hourly: 24
    # Keep 1 snapshot per day for last N days
    daily: 7
    # Keep 1 snapshot per week for last N weeks
    weekly: 4
    # Keep 1 snapshot per month for last N months
    monthly: 3

  # PVCs to snapshot
  pvcs:
    # Example with database that needs pause/resume
    - name: postgres-data
      snapshotClass: longhorn
      hooks:
        # Pre-hooks: Run BEFORE snapshots (executed sequentially, fail-fast)
        # Use pod-exec to run commands in pods for database consistency
        pre:
          - pod: postgres-0
            container: postgres  # Optional: specify container if pod has multiple
            command: ["psql", "-U", "postgres", "-c", "SELECT pg_backup_start()"]
        # Post-hooks: Run AFTER snapshots (executed sequentially, ALWAYS run)
        # These also run on pod termination (SIGTERM) for safety
        post:
          - pod: postgres-0
            command: ["psql", "-U", "postgres", "-c", "SELECT pg_backup_stop()"]

    # Example without hooks (file-based storage)
    - name: app-data
      snapshotClass: longhorn
      # No hooks needed for file-based storage

## =============================================================================
## BorgBackup Configuration
## =============================================================================
## Backs up VolumeSnapshots to BorgBackup repository.
##
borgbackup:
  # Container image configuration
  image:
    repository: ghcr.io/frederikb96/kube-borg-backup-controller
    tag: latest
    pullPolicy: IfNotPresent

  # CronJob schedule configuration
  cron:
    # When to run backups (cron format)
    # Example: "30 */6 * * *" = Every 6 hours at :30
    schedule: "30 */6 * * *"
    # Max seconds to wait before giving up on starting a job
    startingDeadlineSeconds: 300
    # Number of successful jobs to keep
    successfulJobsHistoryLimit: 1
    # Number of failed jobs to keep
    failedJobsHistoryLimit: 1

  # CronJob timeout (activeDeadlineSeconds)
  # Maximum time in seconds for the backup controller to complete all backups
  # The controller processes backups SEQUENTIALLY (borg limitation), so this should
  # account for the sum of all individual backup timeouts plus overhead
  # Example: 7200 = 2 hours for multiple sequential backups
  timeout: 7200

  # Borg pod configuration (spawned by backup controller)
  pod:
    image: ghcr.io/frederikb96/kube-borg-backup-essentials:latest
    # Privileged mode is enabled by default for maximum PVC compatibility
    # Bypasses filesystem permission checks, works with any PVC ownership (PostgreSQL, MySQL, etc.)
    # Uncomment to disable if cluster security policies restrict privileged containers:
    # privileged: false
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"

  # Borg retention policy (applied during borg prune)
  # These control how many archives to keep in the borg repository
  # Note: This is different from snapshot retention (which uses tiered buckets)
  retention:
    # Keep 1 archive per hour for last N hours
    hourly: 24
    # Keep 1 archive per day for last N days
    daily: 7
    # Keep 1 archive per week for last N weeks
    weekly: 4
    # Keep 1 archive per month for last N months
    monthly: 3
    # Keep 1 archive per year for last N years
    yearly: 1

  # Borg cache PVC (improves backup performance)
  cache:
    create: true
    pvcName: borg-cache
    storageClassName: local-path
    size: 5Gi

  # Borg repository URL (ssh://user@host/repo)
  borgRepo: "ssh://user@borgbase.com/./repo"

  # Borg repository passphrase
  borgPassphrase: "your-borg-passphrase"

  # SSH private key for repository access
  # Controller creates ephemeral secrets dynamically per backup
  sshPrivateKey: |
    -----BEGIN OPENSSH PRIVATE KEY-----
    your-ssh-private-key-here
    -----END OPENSSH PRIVATE KEY-----

  # PVCs to backup (must have corresponding snapshots created above)
  backups:
    - name: postgres-db
      pvc: postgres-data
      # Storage class for the CLONE PVC (not the original PVC)
      # The controller creates temporary clone PVCs from snapshots for backup
      # IMPORTANT: Choose a storage class with "Delete" reclaim policy to ensure
      #            clone PVCs are automatically cleaned up at the storage layer
      #            when deleted, preventing storage waste
      # Common choices:
      # - Longhorn with "Delete" policy (ephemeral clones)
      # - ZFS with "Delete" policy (ephemeral clones)
      # - local-path for testing (usually "Delete" by default)
      class: longhorn
      # Timeout for this specific backup (seconds) - REQUIRED
      # This controls TWO things:
      # 1. Pod activeDeadlineSeconds: How long the borg pod is allowed to run
      # 2. Borg --lock-wait: How long borg waits for repository lock
      # Note: Pod will be killed before lock-wait fires, but we set them equal
      #       to ensure lock-wait is never too small
      # Example: 3600 = 1 hour for large database backup
      timeout: 3600
      # Optional: Override clone PVC bind timeout (default: 300s)
      # cloneBindTimeout: 300

    - name: app-data
      pvc: app-data
      class: longhorn
      # Smaller timeout for smaller dataset
      # Example: 1800 = 30 minutes
      timeout: 1800
