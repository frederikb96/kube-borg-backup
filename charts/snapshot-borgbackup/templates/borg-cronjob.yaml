apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Values.borgbackup.name }}
  namespace: {{ .Values.namespace.name }}
  labels:
    {{- include "snapshot-borgbackup.labels" . | nindent 4 }}
spec:
  schedule: {{ .Values.borgbackup.cron.schedule | quote }}
  concurrencyPolicy: {{ .Values.borgbackup.cron.concurrencyPolicy }}
  startingDeadlineSeconds: {{ .Values.borgbackup.cron.startingDeadlineSeconds }}
  successfulJobsHistoryLimit: {{ .Values.borgbackup.cron.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.borgbackup.cron.failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      activeDeadlineSeconds: {{ .Values.borgbackup.cron.activeDeadlineSeconds }}
      backoffLimit: 0
      template:
        spec:
          serviceAccountName: {{ .Values.serviceAccount.name }}
          restartPolicy: Never
          containers:
            - name: {{ .Values.borgbackup.containerName }}
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command: ["/bin/bash","-c"]
              args:
                - |
                  backup() {
                    local name="$1"
                    local pvc="$2"
                    local class="$3"

                    echo "Cleanup old borg pods and clones for $pvc"
                    kubectl -n {{ $.Values.namespace.name }} delete pod {{ $.Values.borgbackup.pod.name }} --ignore-not-found
                    kubectl -n {{ $.Values.namespace.name }} delete pvc -l pvc=${pvc}-clone --ignore-not-found

                    cleanup() {
                      code="$1"
                      if [[ "$code" -ne 0 ]]; then
                        echo "üßπ Cleaning up due to exit code $code"
                        if [[ -n "$POD_YAML" ]]; then
                          echo "$POD_YAML" | kubectl delete -f - || echo "‚ö†Ô∏è Failed to delete borg pod (ignored)"
                        fi
                        if [[ -n "$CLONE_YAML" ]]; then
                          echo "$CLONE_YAML" | kubectl delete -f - || echo "‚ö†Ô∏è Failed to delete clone PVC (ignored)"
                        fi
                        exit "$code"
                      fi
                    }

                    trap 'cleanup 130' SIGINT SIGTERM

                    SNAP=$(kubectl -n {{ $.Values.namespace.name }} get volumesnapshot \
                      -l pvc=${pvc} \
                      --sort-by=.metadata.creationTimestamp \
                      -o go-template='{{`{{range .items}}{{if eq .status.readyToUse true}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}`}}' \
                      | tail -n1)
                    if [[ -z "$SNAP" ]]; then
                      echo "‚ùå No snapshot found for PVC $pvc"
                      exit 1
                    else
                      echo "üì∏ Found snapshot: $SNAP"
                    fi

                    CLONE="${SNAP}-clone"

                    echo "‚öôÔ∏è  Creating clone PVC $CLONE"
                    SIZE=$(kubectl -n {{ $.Values.namespace.name }} get VolumeSnapshot $SNAP -o jsonpath='{.status.restoreSize}')
                    CLONE_YAML=$(cat <<EOF
                  apiVersion: v1
                  kind: PersistentVolumeClaim
                  metadata:
                    name: $CLONE
                    namespace: {{ $.Values.namespace.name }}
                    labels:
                      pvc: ${pvc}-clone
                  spec:
                    accessModes:
                      - ReadWriteOncePod
                    storageClassName: $class
                    resources:
                      requests:
                        storage: $SIZE
                    dataSource:
                      name: $SNAP
                      kind: VolumeSnapshot
                      apiGroup: snapshot.storage.k8s.io
                  EOF
                    )
                    echo "$CLONE_YAML" | kubectl apply -f -
                    cleanup $?

                    echo "‚è≥ Waiting for PVC $CLONE to be Bound or WaitingForFirstConsumer"
                    start_ts=$(date +%s)
                    timeout=300
                    while true; do
                      now_ts=$(date +%s)
                      elapsed=$((now_ts - start_ts))
                      if (( elapsed >= timeout )); then
                        echo "‚è∞ Timeout waiting for PVC $CLONE after ${elapsed}s"
                        cleanup 1
                      fi
                      status=$(kubectl -n {{ $.Values.namespace.name }} get pvc "$CLONE" -o jsonpath='{.status.phase}')
                      if [[ "$status" == "Bound" ]]; then
                        echo "‚úÖ PVC $CLONE is Bound after ${elapsed}s"
                        break
                      fi
                      if kubectl -n {{ $.Values.namespace.name }} describe pvc "$CLONE" | grep -q "WaitForFirstConsumer"; then
                        echo "üïì PVC $CLONE is waiting for first consumer after ${elapsed}s"
                        break
                      fi
                      sleep 5
                    done

                    echo "üì¶ Launching borg pod"
                    POD_YAML=$(cat <<'EOF'
                  apiVersion: v1
                  kind: Pod
                  metadata:
                    name: {{ $.Values.borgbackup.pod.name }}
                    namespace: {{ $.Values.namespace.name }}
                  spec:
                    volumes:
                      - name: borg-cache
                        persistentVolumeClaim:
                          claimName: {{ $.Values.borgbackup.cache.pvcName }}
                      - name: borg-ssh
                        secret:
                          secretName: {{ $.Values.borgbackup.sshSecret.name }}
                          defaultMode: 0400
                      - name: data
                        persistentVolumeClaim:
                          claimName: PLACEHOLDER_PVC
                    containers:
                      - name: {{ $.Values.borgbackup.pod.name }}
                        image: {{ $.Values.borgbackup.pod.image }}
                        imagePullPolicy: Always
                        resources:
{{- if .Values.borgbackup.pod.resources }}
{{ toYaml .Values.borgbackup.pod.resources | indent 26 }}
{{- else }}
                          {}
{{- end }}
                        env:
                          - name: BORG_CACHE_DIR
                            value: /config/borg-cache
                          - name: BORG_RSH
                            value: "ssh -i /config/borg-ssh.key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
                          - name: BORG_FLAGS
                            value: {{ $.Values.borgbackup.borgFlags | quote }}
                        envFrom:
                          - secretRef:
                              name: {{ $.Values.borgbackup.repoSecret.name }}
                        volumeMounts:
                          - name: borg-cache
                            mountPath: /config/borg-cache
                          - name: borg-ssh
                            mountPath: /config/borg-ssh.key
                            subPath: borg-ssh.key
                          - name: data
                            mountPath: /mnt/PLACEHOLDER_PATH
                            readOnly: true
                        command:
                          - /bin/sh
                          - -c
                          - |
                            apk update && apk add --no-cache borgbackup openssh

                            status=0

                            perform_borg_backup() {
                                BORG_REPO="$1"
                                export BORG_PASSPHRASE="$2"
                                prefix="$3"
                                backups_dir="$4"

                                echo "Checking repository: $BORG_REPO"
                                echo "Using prefix: $prefix"
                                echo "Deleting lock"
                                borg break-lock "$BORG_REPO" || echo "No lock to break"
                                if borg info "$BORG_REPO"; then
                                    echo "Repository already exists."
                                else
                                    echo "Repository not found. Initializing now..."
                                    borg init --encryption repokey-blake2 "$BORG_REPO" \
                                        || { echo "Failed to initialize repository"; exit 1; }
                                    echo "Repository initialized."
                                fi

                                ARCHIVE_NAME="${prefix}-$(date +%Y-%m-%d-%H-%M)"
                                borg create --list --filter=AME --stats --files-cache mtime,size "$BORG_REPO::$ARCHIVE_NAME" "${backups_dir}"
                                if [ $? -ne 0 ]; then
                                    echo "Backup failed for $BORG_REPO"
                                    status=1
                                else
                                    borg prune -v --list ${BORG_FLAGS} --glob-archives="${prefix}-*" "${BORG_REPO}"
                                fi
                            }

                            perform_borg_backup "$BORG_REPO" "$BORG_PASSPHRASE" "PLACEHOLDER_PATH" "/mnt/PLACEHOLDER_PATH"

                            if [ $status -ne 0 ]; then
                                echo "Borg backup failed"
                                exit 1
                            else
                                echo "Borg backup completed successfully"
                            fi
                    restartPolicy: Never
                  EOF
                    )
                    POD_YAML="${POD_YAML//PLACEHOLDER_PVC/$CLONE}"
                    POD_YAML="${POD_YAML//PLACEHOLDER_PATH/$name}"
                    echo "$POD_YAML" | kubectl apply -f -
                    cleanup $?

                    echo "‚è≥ Waiting for borg pod to complete"
                    start_ts=$(date +%s)
                    timeout={{ $.Values.borgbackup.pod.timeoutSeconds }}
                    while true; do
                      now_ts=$(date +%s)
                      elapsed=$((now_ts - start_ts))
                      if (( elapsed >= timeout )); then
                        echo "‚è∞ Timeout after $((elapsed / 60)) minutes"
                        cleanup 1
                      fi
                      status=$(kubectl -n {{ $.Values.namespace.name }} get pod {{ $.Values.borgbackup.pod.name }} -o jsonpath='{.status.phase}' 2>/dev/null)
                      if [[ $? -ne 0 ]]; then
                        echo "‚ùå Borg pod {{ $.Values.borgbackup.pod.name }} not found, it may have been deleted unexpectedly"
                        cleanup 1
                      fi
                      case "$status" in
                        Succeeded)
                          echo "‚úÖ borg pod completed successfully after $((elapsed / 60)) minutes"
                          break
                          ;;
                        Failed)
                          echo "‚ùå borg pod failed after $((elapsed / 60)) minutes"
                          cleanup 1
                          ;;
                        *)
                          sleep 10
                          ;;
                      esac
                    done

                    echo "üìú Logs from borg pod:"
                    if kubectl -n {{ $.Values.namespace.name }} get pod {{ $.Values.borgbackup.pod.name }} > /dev/null 2>&1; then
                      kubectl -n {{ $.Values.namespace.name }} logs {{ $.Values.borgbackup.pod.name }} || echo "‚ö†Ô∏è Failed to fetch logs, pod may have terminated unexpectedly"
                    else
                      echo "‚ö†Ô∏è Borg pod {{ $.Values.borgbackup.pod.name }} not found, skipping logs"
                    fi
                    cleanup $?

                    echo "üóëÔ∏è  Deleting borg pod"
                    if [[ -n "$POD_YAML" ]]; then
                      echo "$POD_YAML" | kubectl delete -f - || echo "‚ö†Ô∏è Failed to delete borg pod (ignored)"
                    fi

                    echo "üóëÔ∏è  Deleting clone PVC"
                    if [[ -n "$CLONE_YAML" ]]; then
                      echo "$CLONE_YAML" | kubectl delete -f - || echo "‚ö†Ô∏è Failed to delete clone PVC (ignored)"
                    fi
                  }

                  {{- range .Values.borgbackup.backups }}
                  backup {{ .name }} {{ .pvc }} {{ .class }}
                  {{- end }}

                  echo "‚úÖ Done."
