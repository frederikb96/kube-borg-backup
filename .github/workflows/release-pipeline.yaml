name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'        # Stable releases (v3.0.0)
      - 'v*.*.*-rc*'    # Release candidates (v3.0.0-rc1)
      - 'v*.*.*-beta*'  # Beta releases (v3.0.0-beta1)
      - 'v*.*.*-alpha*' # Alpha releases (v3.0.0-alpha1)

permissions:
  contents: write
  packages: write

jobs:
  # Step 1: Linting (must pass first)
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dev dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r apps/requirements-dev.txt

      - name: Run ruff
        run: ruff check apps/

  # Step 2: Type checking (must pass, runs in parallel with lint)
  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r apps/controller/requirements.txt -r apps/requirements-dev.txt

      - name: Run mypy
        run: mypy --config-file mypy.ini

  # Step 3: Helm chart release (only after lint and typecheck pass)
  release-helm:
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.7.0
        with:
          skip_existing: true
          charts_dir: charts
        env:
          CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CR_RELEASE_NAME_TEMPLATE: "v{{ .Version }}"
          CR_GENERATE_RELEASE_NOTES: true

  # Step 4: Controller image (only after lint and typecheck pass)
  build-controller:
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from tag
        id: ver
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

          # Detect if pre-release (contains -, like 3.0.0-rc1)
          if [[ "$VERSION" == *"-"* ]]; then
            echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Multi-Arch Image
        uses: docker/build-push-action@v4
        with:
          context: apps
          file: apps/Dockerfile.controller
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/kube-borg-backup/controller:${{ steps.ver.outputs.version }}
            ${{ steps.ver.outputs.is_prerelease == 'false' && format('ghcr.io/{0}/kube-borg-backup/controller:latest', github.repository_owner) || '' }}

  # Step 5: Backup-runner image (only after lint and typecheck pass)
  build-backup-runner:
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from tag
        id: ver
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

          # Detect if pre-release (contains -, like 3.0.0-rc1)
          if [[ "$VERSION" == *"-"* ]]; then
            echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Multi-Arch Image
        uses: docker/build-push-action@v4
        with:
          context: apps
          file: apps/Dockerfile.backup-runner
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/kube-borg-backup/backup-runner:${{ steps.ver.outputs.version }}
            ${{ steps.ver.outputs.is_prerelease == 'false' && format('ghcr.io/{0}/kube-borg-backup/backup-runner:latest', github.repository_owner) || '' }}
