apiVersion: batch/v1
kind: CronJob
metadata:
  name: immich-backup #todo template
  namespace: immich #todo template
spec:
  schedule: "30 */6 * * *" #todo template
  concurrencyPolicy: Forbid #todo template
  startingDeadlineSeconds: 300 #todo template
  successfulJobsHistoryLimit: 1 #todo template
  failedJobsHistoryLimit: 1 #todo template
  jobTemplate:
    spec:
      activeDeadlineSeconds: 86400 # 24 hours #todo template
      backoffLimit: 0
      template:
        spec:
          serviceAccountName: snapshot-cron #todo template, same as from the snapshot job, we only use this one service account
          restartPolicy: Never
          containers:
            - name: backup #todo template
              image: bitnami/kubectl:latest #todo template, same as from the snapshot job, we only use this one image
              command: ["/bin/bash","-c"]
              args:
              - |
                backup() {
                  local name="$1"
                  local pvc="$2"
                  local class="$3"
                  #todo introduce a namespace variable similar like in the snapshot chart and use that here in function as arg
                  #todo also template the name of the pod which is created here, so user can pick the name of the backup pod running inside this one, so that immich-borg is not hardcoded

                  echo "Cleanup old borg pods and clones for $pvc"
                  kubectl -n immich delete pod immich-borg --ignore-not-found
                  kubectl -n immich delete pvc -l pvc=${pvc}-clone --ignore-not-found

                  # Cleanup function
                  cleanup() {
                    code="$1"
                    if [[ "$code" -ne 0 ]]; then
                      echo "üßπ Cleaning up due to exit code $code"
                      if [[ -n "$POD_YAML" ]]; then
                        echo "$POD_YAML" | kubectl delete -f - || echo "‚ö†Ô∏è Failed to delete borg pod (ignored)"
                      fi
                      if [[ -n "$CLONE_YAML" ]]; then
                        echo "$CLONE_YAML" | kubectl delete -f - || echo "‚ö†Ô∏è Failed to delete clone PVC (ignored)"
                      fi
                      exit "$code"
                    fi
                  }

                  trap 'cleanup 130' SIGINT SIGTERM

                  # Generate names
                  SNAP=$(kubectl -n immich get volumesnapshot \
                    -l pvc=${pvc} \
                    --sort-by=.metadata.creationTimestamp \
                    -o go-template='{{range .items}}{{if eq .status.readyToUse true}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}' \
                    | tail -n1)
                  if [[ -z "$SNAP" ]]; then
                    echo "‚ùå No snapshot found for PVC $pvc"
                    exit 1
                  else
                    echo "üì∏ Found snapshot: $SNAP"
                  fi

                  CLONE="${SNAP}-clone"

                  echo "‚öôÔ∏è  Creating clone PVC $CLONE"
                  SIZE=$(kubectl -n immich get VolumeSnapshot $SNAP -o jsonpath='{.status.restoreSize}')
                  CLONE_YAML=$(cat <<EOF
                apiVersion: v1
                kind: PersistentVolumeClaim
                metadata:
                  name: $CLONE
                  namespace: immich
                  labels:
                    pvc: ${pvc}-clone
                spec:
                  accessModes:
                    - ReadWriteOncePod
                  storageClassName: $class
                  resources:
                    requests:
                      storage: $SIZE
                  dataSource:
                    name: $SNAP
                    kind: VolumeSnapshot
                    apiGroup: snapshot.storage.k8s.io
                EOF
                )
                  echo "$CLONE_YAML" | kubectl apply -f -
                  cleanup $?

                  echo "‚è≥ Waiting for PVC $CLONE to be Bound or WaitingForFirstConsumer"
                  start_ts=$(date +%s)
                  timeout=300 # seconds
                  while true; do
                    now_ts=$(date +%s)
                    elapsed=$((now_ts - start_ts))
                    # timeout check
                    if (( elapsed >= timeout )); then
                      echo "‚è∞ Timeout waiting for PVC $CLONE after ${elapsed}s"
                      cleanup 1
                    fi
                    # check PVC status
                    status=$(kubectl -n immich get pvc "$CLONE" -o jsonpath='{.status.phase}')
                    if [[ "$status" == "Bound" ]]; then
                      echo "‚úÖ PVC $CLONE is Bound after ${elapsed}s"
                      break
                    fi
                    # check if it's pending but for FirstConsumer
                    if kubectl -n immich describe pvc "$CLONE" | grep -q "WaitForFirstConsumer"; then
                      echo "üïì PVC $CLONE is waiting for first consumer after ${elapsed}s"
                      break
                    fi
                    sleep 5
                  done

                  echo "üì¶ Launching borg pod"
                  POD_YAML=$(cat <<'EOF'
                apiVersion: v1
                kind: Pod
                metadata:
                  name: immich-borg
                  namespace: immich
                spec:
                  volumes:
                    - name: borg-cache
                      persistentVolumeClaim:
                        claimName: immich-borg-cache #todo template, same as we set in pvc via templating
                    - name: borg-ssh #todo template, this we also need to set via variables, etc....
                      secret:
                        secretName: borg-ssh
                        defaultMode: 0400
                    - name: data
                      persistentVolumeClaim:
                        claimName: PLACEHOLDER_PVC
                  containers:
                    - name: immich-borg
                      image: alpine:latest
                      imagePullPolicy: Always
                      resources:
                        requests:
                          memory: "1Gi"
                          cpu: "500m"
                      env:
                        - name: BORG_CACHE_DIR
                          value: /config/borg-cache
                        - name: BORG_RSH
                          value: "ssh -i /config/borg-ssh.key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
                        - name: BORG_FLAGS
                          value: "--keep-hourly=24 --keep-daily=7 --keep-weekly=4 --keep-monthly=3 --keep-yearly=1"
                      envFrom:
                        - secretRef:
                            name: borg-secrets #todo template, this we also need to set via variables
                      volumeMounts:
                        - name: borg-cache
                          mountPath: /config/borg-cache
                        - name: borg-ssh
                          mountPath: /config/borg-ssh.key
                          subPath: borg-ssh.key
                        - name: data
                          mountPath: /mnt/PLACEHOLDER_PATH
                          readOnly: true
                      command:
                        - /bin/sh
                        - -c
                        - |
                          apk update && apk add --no-cache borgbackup openssh

                          status=0

                          perform_borg_backup() {
                              BORG_REPO="$1"
                              export BORG_PASSPHRASE="$2"
                              prefix="$3"
                              backups_dir="$4"

                              echo "Checking repository: $BORG_REPO"
                              echo "Using prefix: $prefix"
                              echo "Deleting lock"
                              borg break-lock "$BORG_REPO" || echo "No lock to break"
                              # Check if the repo exists:
                              if borg info "$BORG_REPO"; then
                                  echo "Repository already exists."
                              else
                                  echo "Repository not found. Initializing now..."
                                  borg init --encryption repokey-blake2 "$BORG_REPO" \
                                      || { echo "Failed to initialize repository"; exit 1; }
                                  echo "Repository initialized."
                              fi

                              ARCHIVE_NAME="${prefix}-$(date +%Y-%m-%d-%H-%M)"
                              #  --list --filter=AME
                              borg create --list --filter=AME --stats --files-cache mtime,size "$BORG_REPO::$ARCHIVE_NAME" "${backups_dir}"
                              if [ $? -ne 0 ]; then
                                  echo "Backup failed for $BORG_REPO"
                                  status=1
                              else
                                  borg prune -v --list ${BORG_FLAGS} --glob-archives="${prefix}-*" "${BORG_REPO}"
                              fi
                          }

                          perform_borg_backup "$BORG_REPO" "$BORG_PASSPHRASE" "PLACEHOLDER_PATH" "/mnt/PLACEHOLDER_PATH"

                          if [ $status -ne 0 ]; then
                              echo "Borg backup failed"
                              exit 1
                          else
                              echo "Borg backup completed successfully"
                          fi
                  restartPolicy: Never
                EOF
                )
                  POD_YAML="${POD_YAML//PLACEHOLDER_PVC/$CLONE}"
                  POD_YAML="${POD_YAML//PLACEHOLDER_PATH/$name}"
                  echo "$POD_YAML" | kubectl apply -f -
                  cleanup $?

                  echo "‚è≥ Waiting for borg pod to complete"
                  start_ts=$(date +%s)
                  timeout=$((24*3600)) # 24 hours in seconds #todo template

                  while true; do
                    now_ts=$(date +%s)
                    elapsed=$((now_ts - start_ts))

                    # timeout?
                    if (( elapsed >= timeout )); then
                      echo "‚è∞ Timeout after $((elapsed / 60)) minutes"
                      cleanup 1
                    fi

                    # if the pod has disappeared, bail out
                    status=$(kubectl -n immich get pod immich-borg -o jsonpath='{.status.phase}' 2>/dev/null)
                    if [[ $? -ne 0 ]]; then
                      echo "‚ùå Borg pod immich-borg not found, it may have been deleted unexpectedly"
                      cleanup 1
                    fi

                    case "$status" in
                      Succeeded)
                        echo "‚úÖ borg pod completed successfully after $((elapsed / 60)) minutes"
                        break
                        ;;
                      Failed)
                        echo "‚ùå borg pod failed after $((elapsed / 60)) minutes"
                        cleanup 1
                        ;;
                      *)
                        sleep 10
                        ;;
                    esac
                  done

                  echo "üìú Logs from borg pod:" #todo template the names below also... as we did above...
                  if kubectl -n immich get pod immich-borg > /dev/null 2>&1; then
                    kubectl -n immich logs immich-borg || echo "‚ö†Ô∏è Failed to fetch logs, pod may have terminated unexpectedly"
                  else
                    echo "‚ö†Ô∏è Borg pod immich-borg not found, skipping logs"
                  fi
                  cleanup $?

                  echo "üóëÔ∏è  Deleting borg pod"
                  if [[ -n "$POD_YAML" ]]; then
                    echo "$POD_YAML" | kubectl delete -f - || echo "‚ö†Ô∏è Failed to delete borg pod (ignored)"
                  fi

                  echo "üóëÔ∏è  Deleting clone PVC"
                  if [[ -n "$CLONE_YAML" ]]; then
                    echo "$CLONE_YAML" | kubectl delete -f - || echo "‚ö†Ô∏è Failed to delete clone PVC (ignored)"
                  fi
                }

                #todo tempalte, here we need to have this list again in values, and loop over that list here
                backup db immich-db-pvc longhorn-temp
                backup model immich-model-cache-pvc longhorn-temp
                backup immich immich-backend-pvc zfs-generic-smb-csi-delete
                echo "‚úÖ Done."
