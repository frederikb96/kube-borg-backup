## -- Namespace management
namespace:
  create: false
  name: immich

## -- Name that ServiceAccount should have
serviceAccount:
  name: immich-backup-serviceaccount

## -- Snapshot CronJob configuration
snapshot:
  name: immich-snapshot
  containerName: immich-snapshot
  image:
    repository: ghcr.io/example/kube-pvc-snapshot
    tag: latest
    pullPolicy: IfNotPresent
  cron:
    schedule: "0 * * * *"
    concurrencyPolicy: Forbid
    startingDeadlineSeconds: 60
    successfulJobsHistoryLimit: 1
    failedJobsHistoryLimit: 1
  hooks:
    pre: |-
      VERSION_NUM=$(kubectl exec -n {{ .Values.namespace.name }} immich-postgres-0 -- \
        bash -c 'psql -U "$DB_USERNAME" -tAc "SHOW server_version_num;"')
      [ -n "$VERSION_NUM" ] || { echo "Failed to get PG version"; exit 1; }

      echo "🗄️ Pausing db"
      if [ "$VERSION_NUM" -ge 150000 ]; then
        kubectl exec -n {{ .Values.namespace.name }} immich-postgres-0 -- \
          bash -c 'psql -U "$DB_USERNAME" -c "SELECT pg_backup_start(label => '\''immich_snap'\'', fast => true);"'
      else
        kubectl exec -n {{ .Values.namespace.name }} immich-postgres-0 -- \
          bash -c 'psql -U "$DB_USERNAME" -c "SELECT pg_start_backup('\''immich_snap'\'', true);"'
      fi
    post: |-
      echo "🗄️ Unpausing db"
      if [ "$VERSION_NUM" -ge 150000 ]; then
        kubectl exec -n {{ .Values.namespace.name }} immich-postgres-0 -- \
          bash -c 'psql -U "$DB_USERNAME" -c "SELECT pg_backup_stop(wait_for_archive => true);"' || echo "No backup in progress"
      else
        kubectl exec -n {{ .Values.namespace.name }} immich-postgres-0 -- \
          bash -c 'psql -U "$DB_USERNAME" -c "SELECT pg_stop_backup(true);"' || echo "No backup in progress"
      fi
      echo "✅ Database unpaused"
  snapshots:
    - pvc: immich-db-pvc
      class: longhorn
      keep:
        n: 12
        m_hours: 24
    - pvc: immich-backend-pvc
      class: zfs-generic-smb-csi
      keep:
        n: 12
        m_hours: 24
    - pvc: immich-model-cache-pvc
      class: longhorn
      keep:
        n: 12
        m_hours: 24

## -- BorgBackup configuration
borgbackup:
  name: immich-backup
  containerName: immich-backup
  image:
    repository: ghcr.io/example/kube-snapshot-borgbackup
    tag: latest
    pullPolicy: IfNotPresent
  cron:
    schedule: "30 */6 * * *"
    concurrencyPolicy: Forbid
    startingDeadlineSeconds: 300
    successfulJobsHistoryLimit: 1
    failedJobsHistoryLimit: 1
    activeDeadlineSeconds: 86400
  pod:
    name: immich-borg
    image: ghcr.io/example/borgbackup-essentials:latest
    timeoutSeconds: 86400
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
  borgFlags: "--keep-hourly=24 --keep-daily=7 --keep-weekly=4 --keep-monthly=3 --keep-yearly=1"
  cache:
    create: true
    pvcName: immich-borg-cache
    storageClassName: openebs-hostpath
    size: 5Gi
  sshSecret:
    name: borg-ssh
    privateKey: |
      -----BEGIN OPENSSH PRIVATE KEY-----
      YOUR_PRIVATE_KEY_HERE
      -----END OPENSSH PRIVATE KEY-----
  repoSecret:
    name: borg-secrets
    BORG_REPO: YOUR_BORG_REPO
    BORG_PASSPHRASE: YOUR_PASSPHRASE
  backups:
    - name: db
      pvc: immich-db-pvc
      class: longhorn-temp
    - name: model
      pvc: immich-model-cache-pvc
      class: longhorn-temp
    - name: immich
      pvc: immich-backend-pvc
      class: zfs-generic-smb-csi-delete
